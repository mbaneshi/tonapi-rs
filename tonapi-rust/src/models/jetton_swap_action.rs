/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JettonSwapAction {
    #[serde(rename = "dex")]
    pub dex: Dex,
    #[serde(rename = "amount_in")]
    pub amount_in: String,
    #[serde(rename = "amount_out")]
    pub amount_out: String,
    #[serde(rename = "ton_in", skip_serializing_if = "Option::is_none")]
    pub ton_in: Option<i64>,
    #[serde(rename = "ton_out", skip_serializing_if = "Option::is_none")]
    pub ton_out: Option<i64>,
    #[serde(rename = "user_wallet")]
    pub user_wallet: Box<crate::models::AccountAddress>,
    #[serde(rename = "router")]
    pub router: Box<crate::models::AccountAddress>,
    #[serde(rename = "jetton_master_in", skip_serializing_if = "Option::is_none")]
    pub jetton_master_in: Option<Box<crate::models::JettonPreview>>,
    #[serde(rename = "jetton_master_out", skip_serializing_if = "Option::is_none")]
    pub jetton_master_out: Option<Box<crate::models::JettonPreview>>,
}

impl JettonSwapAction {
    pub fn new(dex: Dex, amount_in: String, amount_out: String, user_wallet: crate::models::AccountAddress, router: crate::models::AccountAddress) -> JettonSwapAction {
        JettonSwapAction {
            dex,
            amount_in,
            amount_out,
            ton_in: None,
            ton_out: None,
            user_wallet: Box::new(user_wallet),
            router: Box::new(router),
            jetton_master_in: None,
            jetton_master_out: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Dex {
    #[serde(rename = "stonfi")]
    Stonfi,
    #[serde(rename = "dedust")]
    Dedust,
    #[serde(rename = "megatonfi")]
    Megatonfi,
}

impl Default for Dex {
    fn default() -> Dex {
        Self::Stonfi
    }
}

