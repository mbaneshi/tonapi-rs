use serde::{Deserialize, Serialize};

/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockchainRawAccount {
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "balance")]
    pub balance: i64,
    #[serde(rename = "extra_balance", skip_serializing_if = "Option::is_none")]
    pub extra_balance: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    #[serde(rename = "last_transaction_lt")]
    pub last_transaction_lt: i64,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "storage")]
    pub storage: Box<crate::rest_api::codegen::models::AccountStorageInfo>,
}

impl BlockchainRawAccount {
    pub fn new(
        address: String,
        balance: i64,
        last_transaction_lt: i64,
        status: String,
        storage: crate::rest_api::codegen::models::AccountStorageInfo,
    ) -> BlockchainRawAccount {
        BlockchainRawAccount {
            address,
            balance,
            extra_balance: None,
            code: None,
            data: None,
            last_transaction_lt,
            status,
            storage: Box::new(storage),
        }
    }
}
