use serde::{Deserialize, Serialize};

/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SmartContractAction {
    #[serde(rename = "executor")]
    pub executor: Box<crate::rest_api::codegen::models::AccountAddress>,
    #[serde(rename = "contract")]
    pub contract: Box<crate::rest_api::codegen::models::AccountAddress>,
    /// amount in nanotons
    #[serde(rename = "ton_attached")]
    pub ton_attached: i64,
    #[serde(rename = "operation")]
    pub operation: String,
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    #[serde(rename = "refund", skip_serializing_if = "Option::is_none")]
    pub refund: Option<Box<crate::rest_api::codegen::models::Refund>>,
}

impl SmartContractAction {
    pub fn new(
        executor: crate::rest_api::codegen::models::AccountAddress,
        contract: crate::rest_api::codegen::models::AccountAddress,
        ton_attached: i64,
        operation: String,
    ) -> SmartContractAction {
        SmartContractAction {
            executor: Box::new(executor),
            contract: Box::new(contract),
            ton_attached,
            operation,
            payload: None,
            refund: None,
        }
    }
}
