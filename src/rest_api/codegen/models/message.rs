use serde::{Deserialize, Serialize};

/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Message {
    #[serde(rename = "msg_type")]
    pub msg_type: MsgType,
    #[serde(rename = "created_lt")]
    pub created_lt: i64,
    #[serde(rename = "ihr_disabled")]
    pub ihr_disabled: bool,
    #[serde(rename = "bounce")]
    pub bounce: bool,
    #[serde(rename = "bounced")]
    pub bounced: bool,
    #[serde(rename = "value")]
    pub value: i64,
    #[serde(rename = "fwd_fee")]
    pub fwd_fee: i64,
    #[serde(rename = "ihr_fee")]
    pub ihr_fee: i64,
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<Box<crate::rest_api::codegen::models::AccountAddress>>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::rest_api::codegen::models::AccountAddress>>,
    #[serde(rename = "import_fee")]
    pub import_fee: i64,
    #[serde(rename = "created_at")]
    pub created_at: i64,
    #[serde(rename = "op_code", skip_serializing_if = "Option::is_none")]
    pub op_code: Option<String>,
    #[serde(rename = "init", skip_serializing_if = "Option::is_none")]
    pub init: Option<Box<crate::rest_api::codegen::models::StateInit>>,
    /// hex-encoded BoC with raw message body
    #[serde(rename = "raw_body", skip_serializing_if = "Option::is_none")]
    pub raw_body: Option<String>,
    #[serde(rename = "decoded_op_name", skip_serializing_if = "Option::is_none")]
    pub decoded_op_name: Option<String>,
    #[serde(
        rename = "decoded_body",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub decoded_body: Option<Option<serde_json::Value>>,
}

impl Message {
    pub fn new(
        msg_type: MsgType,
        created_lt: i64,
        ihr_disabled: bool,
        bounce: bool,
        bounced: bool,
        value: i64,
        fwd_fee: i64,
        ihr_fee: i64,
        import_fee: i64,
        created_at: i64,
    ) -> Message {
        Message {
            msg_type,
            created_lt,
            ihr_disabled,
            bounce,
            bounced,
            value,
            fwd_fee,
            ihr_fee,
            destination: None,
            source: None,
            import_fee,
            created_at,
            op_code: None,
            init: None,
            raw_body: None,
            decoded_op_name: None,
            decoded_body: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MsgType {
    #[serde(rename = "int_msg")]
    IntMsg,
    #[serde(rename = "ext_in_msg")]
    ExtInMsg,
    #[serde(rename = "ext_out_msg")]
    ExtOutMsg,
}

impl Default for MsgType {
    fn default() -> MsgType {
        Self::IntMsg
    }
}
