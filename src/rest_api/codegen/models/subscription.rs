use serde::{Deserialize, Serialize};
use tonlib::address::TonAddress;

/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subscription {
    #[serde(rename = "address")]
    pub address: TonAddress,
    #[serde(rename = "wallet_address")]
    pub wallet_address: String,
    #[serde(rename = "beneficiary_address")]
    pub beneficiary_address: String,
    #[serde(rename = "amount")]
    pub amount: i64,
    #[serde(rename = "period")]
    pub period: i64,
    #[serde(rename = "start_time")]
    pub start_time: i64,
    #[serde(rename = "timeout")]
    pub timeout: i64,
    #[serde(rename = "last_payment_time")]
    pub last_payment_time: i64,
    #[serde(rename = "last_request_time")]
    pub last_request_time: i64,
    #[serde(rename = "subscription_id")]
    pub subscription_id: i64,
    #[serde(rename = "failed_attempts")]
    pub failed_attempts: i32,
}

impl Subscription {
    pub fn new(
        address: TonAddress,
        wallet_address: String,
        beneficiary_address: String,
        amount: i64,
        period: i64,
        start_time: i64,
        timeout: i64,
        last_payment_time: i64,
        last_request_time: i64,
        subscription_id: i64,
        failed_attempts: i32,
    ) -> Subscription {
        Subscription {
            address,
            wallet_address,
            beneficiary_address,
            amount,
            period,
            start_time,
            timeout,
            last_payment_time,
            last_request_time,
            subscription_id,
            failed_attempts,
        }
    }
}
