use serde::{Deserialize, Serialize};

/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TvmStackRecord {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "cell", skip_serializing_if = "Option::is_none")]
    pub cell: Option<String>,
    #[serde(rename = "slice", skip_serializing_if = "Option::is_none")]
    pub slice: Option<String>,
    #[serde(rename = "num", skip_serializing_if = "Option::is_none")]
    pub num: Option<String>,
    #[serde(rename = "tuple", skip_serializing_if = "Option::is_none")]
    pub tuple: Option<Vec<crate::rest_api::codegen::models::TvmStackRecord>>,
}

impl TvmStackRecord {
    pub fn new(r#type: Type) -> TvmStackRecord {
        TvmStackRecord {
            r#type,
            cell: None,
            slice: None,
            num: None,
            tuple: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "cell")]
    Cell,
    #[serde(rename = "num")]
    Num,
    #[serde(rename = "nan")]
    Nan,
    #[serde(rename = "null")]
    Null,
    #[serde(rename = "tuple")]
    Tuple,
}

impl Default for Type {
    fn default() -> Type {
        Self::Cell
    }
}
