use serde::{Deserialize, Serialize};

/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NftItemTransferAction {
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<Box<crate::rest_api::codegen::models::AccountAddress>>,
    #[serde(rename = "recipient", skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Box<crate::rest_api::codegen::models::AccountAddress>>,
    #[serde(rename = "nft")]
    pub nft: String,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "encrypted_comment", skip_serializing_if = "Option::is_none")]
    pub encrypted_comment: Option<Box<crate::rest_api::codegen::models::EncryptedComment>>,
    /// raw hex encoded payload
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<String>,
    #[serde(rename = "refund", skip_serializing_if = "Option::is_none")]
    pub refund: Option<Box<crate::rest_api::codegen::models::Refund>>,
}

impl NftItemTransferAction {
    pub fn new(nft: String) -> NftItemTransferAction {
        NftItemTransferAction {
            sender: None,
            recipient: None,
            nft,
            comment: None,
            encrypted_comment: None,
            payload: None,
            refund: None,
        }
    }
}
