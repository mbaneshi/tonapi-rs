use serde::{Deserialize, Serialize};

/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */

/// AccountEvent : An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountEvent {
    #[serde(rename = "event_id")]
    pub event_id: String,
    #[serde(rename = "account")]
    pub account: Box<crate::rest_api::codegen::models::AccountAddress>,
    #[serde(rename = "timestamp")]
    pub timestamp: i64,
    #[serde(rename = "actions")]
    pub actions: Vec<crate::rest_api::codegen::models::Action>,
    /// scam
    #[serde(rename = "is_scam")]
    pub is_scam: bool,
    #[serde(rename = "lt")]
    pub lt: i64,
    /// Event is not finished yet. Transactions still happening
    #[serde(rename = "in_progress")]
    pub in_progress: bool,
    /// TODO
    #[serde(rename = "extra")]
    pub extra: i64,
}

impl AccountEvent {
    /// An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
    pub fn new(
        event_id: String,
        account: crate::rest_api::codegen::models::AccountAddress,
        timestamp: i64,
        actions: Vec<crate::rest_api::codegen::models::Action>,
        is_scam: bool,
        lt: i64,
        in_progress: bool,
        extra: i64,
    ) -> AccountEvent {
        AccountEvent {
            event_id,
            account: Box::new(account),
            timestamp,
            actions,
            is_scam,
            lt,
            in_progress,
            extra,
        }
    }
}
