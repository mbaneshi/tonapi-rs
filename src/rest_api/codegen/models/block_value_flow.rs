use serde::{Deserialize, Serialize};

/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockValueFlow {
    #[serde(rename = "from_prev_blk")]
    pub from_prev_blk: Box<crate::rest_api::codegen::models::BlockCurrencyCollection>,
    #[serde(rename = "to_next_blk")]
    pub to_next_blk: Box<crate::rest_api::codegen::models::BlockCurrencyCollection>,
    #[serde(rename = "imported")]
    pub imported: Box<crate::rest_api::codegen::models::BlockCurrencyCollection>,
    #[serde(rename = "exported")]
    pub exported: Box<crate::rest_api::codegen::models::BlockCurrencyCollection>,
    #[serde(rename = "fees_collected")]
    pub fees_collected: Box<crate::rest_api::codegen::models::BlockCurrencyCollection>,
    #[serde(rename = "burned", skip_serializing_if = "Option::is_none")]
    pub burned: Option<Box<crate::rest_api::codegen::models::BlockCurrencyCollection>>,
    #[serde(rename = "fees_imported")]
    pub fees_imported: Box<crate::rest_api::codegen::models::BlockCurrencyCollection>,
    #[serde(rename = "recovered")]
    pub recovered: Box<crate::rest_api::codegen::models::BlockCurrencyCollection>,
    #[serde(rename = "created")]
    pub created: Box<crate::rest_api::codegen::models::BlockCurrencyCollection>,
    #[serde(rename = "minted")]
    pub minted: Box<crate::rest_api::codegen::models::BlockCurrencyCollection>,
}

impl BlockValueFlow {
    pub fn new(
        from_prev_blk: crate::rest_api::codegen::models::BlockCurrencyCollection,
        to_next_blk: crate::rest_api::codegen::models::BlockCurrencyCollection,
        imported: crate::rest_api::codegen::models::BlockCurrencyCollection,
        exported: crate::rest_api::codegen::models::BlockCurrencyCollection,
        fees_collected: crate::rest_api::codegen::models::BlockCurrencyCollection,
        fees_imported: crate::rest_api::codegen::models::BlockCurrencyCollection,
        recovered: crate::rest_api::codegen::models::BlockCurrencyCollection,
        created: crate::rest_api::codegen::models::BlockCurrencyCollection,
        minted: crate::rest_api::codegen::models::BlockCurrencyCollection,
    ) -> BlockValueFlow {
        BlockValueFlow {
            from_prev_blk: Box::new(from_prev_blk),
            to_next_blk: Box::new(to_next_blk),
            imported: Box::new(imported),
            exported: Box::new(exported),
            fees_collected: Box::new(fees_collected),
            burned: None,
            fees_imported: Box::new(fees_imported),
            recovered: Box::new(recovered),
            created: Box::new(created),
            minted: Box::new(minted),
        }
    }
}
