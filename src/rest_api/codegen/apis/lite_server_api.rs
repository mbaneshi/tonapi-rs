use serde::{Deserialize, Serialize};

/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use tonlib::address::TonAddress;

use super::{configuration, Error};
use crate::rest_api::codegen::apis::ResponseContent;

/// struct for passing parameters to the method [`get_all_raw_shards_info`]
#[derive(Clone, Debug)]
pub struct GetAllRawShardsInfoParams {
    /// block ID: (workchain,shard,seqno,root_hash,file_hash)
    pub block_id: String,
}

/// struct for passing parameters to the method [`get_raw_account_state`]
#[derive(Clone, Debug)]
pub struct GetRawAccountStateParams {
    /// account ID
    pub account_id: TonAddress,
    /// target block: (workchain,shard,seqno,root_hash,file_hash)
    pub target_block: Option<String>,
}

/// struct for passing parameters to the method [`get_raw_block_proof`]
#[derive(Clone, Debug)]
pub struct GetRawBlockProofParams {
    /// known block: (workchain,shard,seqno,root_hash,file_hash)
    pub known_block: String,
    /// mode
    pub mode: i32,
    /// target block: (workchain,shard,seqno,root_hash,file_hash)
    pub target_block: Option<String>,
}

/// struct for passing parameters to the method [`get_raw_blockchain_block`]
#[derive(Clone, Debug)]
pub struct GetRawBlockchainBlockParams {
    /// block ID: (workchain,shard,seqno,root_hash,file_hash)
    pub block_id: String,
}

/// struct for passing parameters to the method [`get_raw_blockchain_block_header`]
#[derive(Clone, Debug)]
pub struct GetRawBlockchainBlockHeaderParams {
    /// block ID: (workchain,shard,seqno,root_hash,file_hash)
    pub block_id: String,
    /// mode
    pub mode: i32,
}

/// struct for passing parameters to the method [`get_raw_blockchain_block_state`]
#[derive(Clone, Debug)]
pub struct GetRawBlockchainBlockStateParams {
    /// block ID: (workchain,shard,seqno,root_hash,file_hash)
    pub block_id: String,
}

/// struct for passing parameters to the method [`get_raw_config`]
#[derive(Clone, Debug)]
pub struct GetRawConfigParams {
    /// block ID: (workchain,shard,seqno,root_hash,file_hash)
    pub block_id: String,
    /// mode
    pub mode: i32,
}

/// struct for passing parameters to the method [`get_raw_list_block_transactions`]
#[derive(Clone, Debug)]
pub struct GetRawListBlockTransactionsParams {
    /// block ID: (workchain,shard,seqno,root_hash,file_hash)
    pub block_id: String,
    /// mode
    pub mode: i32,
    /// count
    pub count: i32,
    /// account ID
    pub account_id: Option<String>,
    /// lt
    pub lt: Option<i32>,
}

/// struct for passing parameters to the method [`get_raw_masterchain_info_ext`]
#[derive(Clone, Debug)]
pub struct GetRawMasterchainInfoExtParams {
    /// mode
    pub mode: i32,
}

/// struct for passing parameters to the method [`get_raw_shard_block_proof`]
#[derive(Clone, Debug)]
pub struct GetRawShardBlockProofParams {
    /// block ID: (workchain,shard,seqno,root_hash,file_hash)
    pub block_id: String,
}

/// struct for passing parameters to the method [`get_raw_shard_info`]
#[derive(Clone, Debug)]
pub struct GetRawShardInfoParams {
    /// block ID: (workchain,shard,seqno,root_hash,file_hash)
    pub block_id: String,
    /// workchain
    pub workchain: i32,
    /// shard
    pub shard: i32,
    /// exact
    pub exact: bool,
}

/// struct for passing parameters to the method [`get_raw_transactions`]
#[derive(Clone, Debug)]
pub struct GetRawTransactionsParams {
    /// account ID
    pub account_id: TonAddress,
    /// count
    pub count: i32,
    /// lt
    pub lt: i32,
    /// hash
    pub hash: String,
}

/// struct for passing parameters to the method [`send_raw_message`]
#[derive(Clone, Debug)]
pub struct SendRawMessageParams {
    /// Data that is expected
    pub send_raw_message_request: crate::rest_api::codegen::models::SendRawMessageRequest,
}

/// struct for typed errors of method [`get_all_raw_shards_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllRawShardsInfoError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_account_state`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawAccountStateError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_block_proof`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawBlockProofError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_blockchain_block`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawBlockchainBlockError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_blockchain_block_header`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawBlockchainBlockHeaderError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_blockchain_block_state`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawBlockchainBlockStateError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawConfigError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_list_block_transactions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawListBlockTransactionsError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_masterchain_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawMasterchainInfoError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_masterchain_info_ext`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawMasterchainInfoExtError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_shard_block_proof`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawShardBlockProofError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_shard_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawShardInfoError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_time`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawTimeError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_raw_transactions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRawTransactionsError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`send_raw_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SendRawMessageError {
    DefaultResponse(crate::rest_api::codegen::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// Get all raw shards info
pub async fn get_all_raw_shards_info(
    configuration: &configuration::Configuration,
    params: GetAllRawShardsInfoParams,
) -> Result<
    crate::rest_api::codegen::models::GetAllRawShardsInfo200Response,
    Error<GetAllRawShardsInfoError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let block_id = params.block_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_all_shards_info/{block_id}",
        local_var_configuration.base_path,
        block_id = crate::rest_api::codegen::apis::urlencode(block_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllRawShardsInfoError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw account state
pub async fn get_raw_account_state(
    configuration: &configuration::Configuration,
    params: GetRawAccountStateParams,
) -> Result<
    crate::rest_api::codegen::models::GetRawAccountState200Response,
    Error<GetRawAccountStateError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let account_id = params.account_id;
    let target_block = params.target_block;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_account_state/{account_id}",
        local_var_configuration.base_path,
        account_id = crate::rest_api::codegen::apis::urlencode(account_id.to_base64_url())
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = target_block {
        local_var_req_builder =
            local_var_req_builder.query(&[("target_block", &local_var_str.to_string())]);
    }
    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawAccountStateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw block proof
pub async fn get_raw_block_proof(
    configuration: &configuration::Configuration,
    params: GetRawBlockProofParams,
) -> Result<
    crate::rest_api::codegen::models::GetRawBlockProof200Response,
    Error<GetRawBlockProofError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let known_block = params.known_block;
    let mode = params.mode;
    let target_block = params.target_block;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_block_proof",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder =
        local_var_req_builder.query(&[("known_block", &known_block.to_string())]);
    if let Some(ref local_var_str) = target_block {
        local_var_req_builder =
            local_var_req_builder.query(&[("target_block", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("mode", &mode.to_string())]);
    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawBlockProofError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw blockchain block
pub async fn get_raw_blockchain_block(
    configuration: &configuration::Configuration,
    params: GetRawBlockchainBlockParams,
) -> Result<
    crate::rest_api::codegen::models::GetRawBlockchainBlock200Response,
    Error<GetRawBlockchainBlockError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let block_id = params.block_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_block/{block_id}",
        local_var_configuration.base_path,
        block_id = crate::rest_api::codegen::apis::urlencode(block_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawBlockchainBlockError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw blockchain block header
pub async fn get_raw_blockchain_block_header(
    configuration: &configuration::Configuration,
    params: GetRawBlockchainBlockHeaderParams,
) -> Result<
    crate::rest_api::codegen::models::GetRawBlockchainBlockHeader200Response,
    Error<GetRawBlockchainBlockHeaderError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let block_id = params.block_id;
    let mode = params.mode;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_block_header/{block_id}",
        local_var_configuration.base_path,
        block_id = crate::rest_api::codegen::apis::urlencode(block_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("mode", &mode.to_string())]);
    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawBlockchainBlockHeaderError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw blockchain block state
pub async fn get_raw_blockchain_block_state(
    configuration: &configuration::Configuration,
    params: GetRawBlockchainBlockStateParams,
) -> Result<
    crate::rest_api::codegen::models::GetRawBlockchainBlockState200Response,
    Error<GetRawBlockchainBlockStateError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let block_id = params.block_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_state/{block_id}",
        local_var_configuration.base_path,
        block_id = crate::rest_api::codegen::apis::urlencode(block_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawBlockchainBlockStateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw config
pub async fn get_raw_config(
    configuration: &configuration::Configuration,
    params: GetRawConfigParams,
) -> Result<crate::rest_api::codegen::models::GetRawConfig200Response, Error<GetRawConfigError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let block_id = params.block_id;
    let mode = params.mode;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_config_all/{block_id}",
        local_var_configuration.base_path,
        block_id = crate::rest_api::codegen::apis::urlencode(block_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("mode", &mode.to_string())]);
    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawConfigError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw list block transactions
pub async fn get_raw_list_block_transactions(
    configuration: &configuration::Configuration,
    params: GetRawListBlockTransactionsParams,
) -> Result<
    crate::rest_api::codegen::models::GetRawListBlockTransactions200Response,
    Error<GetRawListBlockTransactionsError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let block_id = params.block_id;
    let mode = params.mode;
    let count = params.count;
    let account_id = params.account_id;
    let lt = params.lt;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/list_block_transactions/{block_id}",
        local_var_configuration.base_path,
        block_id = crate::rest_api::codegen::apis::urlencode(block_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("mode", &mode.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("count", &count.to_string())]);
    if let Some(ref local_var_str) = account_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("account_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lt {
        local_var_req_builder = local_var_req_builder.query(&[("lt", &local_var_str.to_string())]);
    }
    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawListBlockTransactionsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw masterchain info
pub async fn get_raw_masterchain_info(
    configuration: &configuration::Configuration,
) -> Result<
    crate::rest_api::codegen::models::GetRawMasterchainInfo200Response,
    Error<GetRawMasterchainInfoError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_masterchain_info",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawMasterchainInfoError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw masterchain info ext
pub async fn get_raw_masterchain_info_ext(
    configuration: &configuration::Configuration,
    params: GetRawMasterchainInfoExtParams,
) -> Result<
    crate::rest_api::codegen::models::GetRawMasterchainInfoExt200Response,
    Error<GetRawMasterchainInfoExtError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let mode = params.mode;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_masterchain_info_ext",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("mode", &mode.to_string())]);
    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawMasterchainInfoExtError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw shard block proof
pub async fn get_raw_shard_block_proof(
    configuration: &configuration::Configuration,
    params: GetRawShardBlockProofParams,
) -> Result<
    crate::rest_api::codegen::models::GetRawShardBlockProof200Response,
    Error<GetRawShardBlockProofError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let block_id = params.block_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_shard_block_proof/{block_id}",
        local_var_configuration.base_path,
        block_id = crate::rest_api::codegen::apis::urlencode(block_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawShardBlockProofError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw shard info
pub async fn get_raw_shard_info(
    configuration: &configuration::Configuration,
    params: GetRawShardInfoParams,
) -> Result<crate::rest_api::codegen::models::GetRawShardInfo200Response, Error<GetRawShardInfoError>>
{
    let local_var_configuration = configuration;

    // unbox the parameters
    let block_id = params.block_id;
    let workchain = params.workchain;
    let shard = params.shard;
    let exact = params.exact;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_shard_info/{block_id}",
        local_var_configuration.base_path,
        block_id = crate::rest_api::codegen::apis::urlencode(block_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("workchain", &workchain.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("shard", &shard.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("exact", &exact.to_string())]);
    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawShardInfoError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw time
pub async fn get_raw_time(
    configuration: &configuration::Configuration,
) -> Result<crate::rest_api::codegen::models::GetRawTime200Response, Error<GetRawTimeError>> {
    let local_var_configuration = configuration;

    // unbox the parameters

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_time",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawTimeError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get raw transactions
pub async fn get_raw_transactions(
    configuration: &configuration::Configuration,
    params: GetRawTransactionsParams,
) -> Result<
    crate::rest_api::codegen::models::GetRawTransactions200Response,
    Error<GetRawTransactionsError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let account_id = params.account_id;
    let count = params.count;
    let lt = params.lt;
    let hash = params.hash;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/get_transactions/{account_id}",
        local_var_configuration.base_path,
        account_id = crate::rest_api::codegen::apis::urlencode(account_id.to_base64_url())
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("count", &count.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lt", &lt.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("hash", &hash.to_string())]);
    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRawTransactionsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Send raw message to blockchain
pub async fn send_raw_message(
    configuration: &configuration::Configuration,
    params: SendRawMessageParams,
) -> Result<crate::rest_api::codegen::models::SendRawMessage200Response, Error<SendRawMessageError>>
{
    let local_var_configuration = configuration;

    // unbox the parameters
    let send_raw_message_request = params.send_raw_message_request;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v2/liteserver/send_message",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref bearer_access_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(bearer_access_token);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&send_raw_message_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SendRawMessageError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
