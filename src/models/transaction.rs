/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Transaction {
    #[serde(rename = "hash")]
    pub hash: String,
    #[serde(rename = "lt")]
    pub lt: i64,
    #[serde(rename = "account")]
    pub account: Box<crate::models::AccountAddress>,
    #[serde(rename = "success")]
    pub success: bool,
    #[serde(rename = "utime")]
    pub utime: i64,
    #[serde(rename = "orig_status")]
    pub orig_status: crate::models::AccountStatus,
    #[serde(rename = "end_status")]
    pub end_status: crate::models::AccountStatus,
    #[serde(rename = "total_fees")]
    pub total_fees: i64,
    #[serde(rename = "transaction_type")]
    pub transaction_type: crate::models::TransactionType,
    #[serde(rename = "state_update_old")]
    pub state_update_old: String,
    #[serde(rename = "state_update_new")]
    pub state_update_new: String,
    #[serde(rename = "in_msg", skip_serializing_if = "Option::is_none")]
    pub in_msg: Option<Box<crate::models::Message>>,
    #[serde(rename = "out_msgs")]
    pub out_msgs: Vec<crate::models::Message>,
    #[serde(rename = "block")]
    pub block: String,
    #[serde(rename = "prev_trans_hash", skip_serializing_if = "Option::is_none")]
    pub prev_trans_hash: Option<String>,
    #[serde(rename = "prev_trans_lt", skip_serializing_if = "Option::is_none")]
    pub prev_trans_lt: Option<i64>,
    #[serde(rename = "compute_phase", skip_serializing_if = "Option::is_none")]
    pub compute_phase: Option<Box<crate::models::ComputePhase>>,
    #[serde(rename = "storage_phase", skip_serializing_if = "Option::is_none")]
    pub storage_phase: Option<Box<crate::models::StoragePhase>>,
    #[serde(rename = "credit_phase", skip_serializing_if = "Option::is_none")]
    pub credit_phase: Option<Box<crate::models::CreditPhase>>,
    #[serde(rename = "action_phase", skip_serializing_if = "Option::is_none")]
    pub action_phase: Option<Box<crate::models::ActionPhase>>,
    #[serde(rename = "bounce_phase", skip_serializing_if = "Option::is_none")]
    pub bounce_phase: Option<crate::models::BouncePhaseType>,
    #[serde(rename = "aborted")]
    pub aborted: bool,
    #[serde(rename = "destroyed")]
    pub destroyed: bool,
}

impl Transaction {
    pub fn new(hash: String, lt: i64, account: crate::models::AccountAddress, success: bool, utime: i64, orig_status: crate::models::AccountStatus, end_status: crate::models::AccountStatus, total_fees: i64, transaction_type: crate::models::TransactionType, state_update_old: String, state_update_new: String, out_msgs: Vec<crate::models::Message>, block: String, aborted: bool, destroyed: bool) -> Transaction {
        Transaction {
            hash,
            lt,
            account: Box::new(account),
            success,
            utime,
            orig_status,
            end_status,
            total_fees,
            transaction_type,
            state_update_old,
            state_update_new,
            in_msg: None,
            out_msgs,
            block,
            prev_trans_hash: None,
            prev_trans_lt: None,
            compute_phase: None,
            storage_phase: None,
            credit_phase: None,
            action_phase: None,
            bounce_phase: None,
            aborted,
            destroyed,
        }
    }
}


