/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`dns_resolve`]
#[derive(Clone, Debug)]
pub struct DnsResolveParams {
    /// domain name with .ton or .t.me
    pub domain_name: String
}

/// struct for passing parameters to the method [`get_all_auctions`]
#[derive(Clone, Debug)]
pub struct GetAllAuctionsParams {
    /// domain filter for current auctions \"ton\" or \"t.me\"
    pub tld: Option<String>
}

/// struct for passing parameters to the method [`get_dns_info`]
#[derive(Clone, Debug)]
pub struct GetDnsInfoParams {
    /// domain name with .ton or .t.me
    pub domain_name: String
}

/// struct for passing parameters to the method [`get_domain_bids`]
#[derive(Clone, Debug)]
pub struct GetDomainBidsParams {
    /// domain name with .ton or .t.me
    pub domain_name: String
}


/// struct for typed errors of method [`dns_resolve`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DnsResolveError {
    DefaultResponse(crate::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_auctions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllAuctionsError {
    DefaultResponse(crate::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_dns_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDnsInfoError {
    DefaultResponse(crate::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_domain_bids`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDomainBidsError {
    DefaultResponse(crate::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}


/// DNS resolve for domain name
pub async fn dns_resolve(configuration: &configuration::Configuration, params: DnsResolveParams) -> Result<crate::models::DnsRecord, Error<DnsResolveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let domain_name = params.domain_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/dns/{domain_name}/resolve", local_var_configuration.base_path, domain_name=crate::apis::urlencode(domain_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DnsResolveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get all auctions
pub async fn get_all_auctions(configuration: &configuration::Configuration, params: GetAllAuctionsParams) -> Result<crate::models::Auctions, Error<GetAllAuctionsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tld = params.tld;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/dns/auctions", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tld {
        local_var_req_builder = local_var_req_builder.query(&[("tld", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllAuctionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get full information about domain name
pub async fn get_dns_info(configuration: &configuration::Configuration, params: GetDnsInfoParams) -> Result<crate::models::DomainInfo, Error<GetDnsInfoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let domain_name = params.domain_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/dns/{domain_name}", local_var_configuration.base_path, domain_name=crate::apis::urlencode(domain_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDnsInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get domain bids
pub async fn get_domain_bids(configuration: &configuration::Configuration, params: GetDomainBidsParams) -> Result<crate::models::DomainBids, Error<GetDomainBidsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let domain_name = params.domain_name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/dns/{domain_name}/bids", local_var_configuration.base_path, domain_name=crate::apis::urlencode(domain_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetDomainBidsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

