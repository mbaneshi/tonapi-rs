/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_chart_rates`]
#[derive(Clone, Debug)]
pub struct GetChartRatesParams {
    /// accept jetton master address
    pub token: String,
    pub currency: Option<String>,
    pub start_date: Option<i64>,
    pub end_date: Option<i64>
}

/// struct for passing parameters to the method [`get_rates`]
#[derive(Clone, Debug)]
pub struct GetRatesParams {
    /// accept ton and jetton master addresses, separated by commas
    pub tokens: String,
    /// accept ton and all possible fiat currencies, separated by commas
    pub currencies: String
}


/// struct for typed errors of method [`get_chart_rates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChartRatesError {
    DefaultResponse(crate::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_rates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetRatesError {
    DefaultResponse(crate::models::GetBlockchainBlockDefaultResponse),
    UnknownValue(serde_json::Value),
}


/// Get chart by token
pub async fn get_chart_rates(configuration: &configuration::Configuration, params: GetChartRatesParams) -> Result<crate::models::GetChartRates200Response, Error<GetChartRatesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let currency = params.currency;
    let start_date = params.start_date;
    let end_date = params.end_date;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/rates/chart", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = currency {
        local_var_req_builder = local_var_req_builder.query(&[("currency", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_date {
        local_var_req_builder = local_var_req_builder.query(&[("start_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_date {
        local_var_req_builder = local_var_req_builder.query(&[("end_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetChartRatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the token price to the currency
pub async fn get_rates(configuration: &configuration::Configuration, params: GetRatesParams) -> Result<crate::models::GetRates200Response, Error<GetRatesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tokens = params.tokens;
    let currencies = params.currencies;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v2/rates", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("tokens", &tokens.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("currencies", &currencies.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetRatesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

