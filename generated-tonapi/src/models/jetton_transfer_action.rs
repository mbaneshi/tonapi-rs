/*
 * REST api to TON blockchain explorer
 *
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct JettonTransferAction {
    #[serde(rename = "sender", skip_serializing_if = "Option::is_none")]
    pub sender: Option<Box<crate::models::AccountAddress>>,
    #[serde(rename = "recipient", skip_serializing_if = "Option::is_none")]
    pub recipient: Option<Box<crate::models::AccountAddress>>,
    #[serde(rename = "senders_wallet")]
    pub senders_wallet: String,
    #[serde(rename = "recipients_wallet")]
    pub recipients_wallet: String,
    /// amount in quanta of tokens
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "encrypted_comment", skip_serializing_if = "Option::is_none")]
    pub encrypted_comment: Option<Box<crate::models::EncryptedComment>>,
    #[serde(rename = "refund", skip_serializing_if = "Option::is_none")]
    pub refund: Option<Box<crate::models::Refund>>,
    #[serde(rename = "jetton")]
    pub jetton: Box<crate::models::JettonPreview>,
}

impl JettonTransferAction {
    pub fn new(senders_wallet: String, recipients_wallet: String, amount: String, jetton: crate::models::JettonPreview) -> JettonTransferAction {
        JettonTransferAction {
            sender: None,
            recipient: None,
            senders_wallet,
            recipients_wallet,
            amount,
            comment: None,
            encrypted_comment: None,
            refund: None,
            jetton: Box::new(jetton),
        }
    }
}


